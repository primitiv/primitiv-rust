/* automatically generated by rust-bindgen */

pub const __bool_true_false_are_defined : :: std :: os :: raw :: c_uint = 1 ; pub const true_ : :: std :: os :: raw :: c_uint = 1 ; pub const false_ : :: std :: os :: raw :: c_uint = 0 ; pub const _STDINT_H : :: std :: os :: raw :: c_uint = 1 ; pub const _FEATURES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _DEFAULT_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC11 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC99 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC95 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX_IMPLICITLY : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_C_SOURCE : :: std :: os :: raw :: c_uint = 200809 ; pub const __USE_POSIX : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX2 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199309 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199506 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K8 : :: std :: os :: raw :: c_uint = 1 ; pub const _ATFILE_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_MISC : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ATFILE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_FORTIFY_LEVEL : :: std :: os :: raw :: c_uint = 0 ; pub const _STDC_PREDEF_H : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559_COMPLEX__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_ISO_10646__ : :: std :: os :: raw :: c_uint = 201505 ; pub const __STDC_NO_THREADS__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GNU_LIBRARY__ : :: std :: os :: raw :: c_uint = 6 ; pub const __GLIBC__ : :: std :: os :: raw :: c_uint = 2 ; pub const __GLIBC_MINOR__ : :: std :: os :: raw :: c_uint = 23 ; pub const _SYS_CDEFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const __WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : :: std :: os :: raw :: c_uint = 1 ; pub const __SYSCALL_WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const _BITS_WCHAR_H : :: std :: os :: raw :: c_uint = 1 ; pub const INT8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT16_MIN : :: std :: os :: raw :: c_int = -32768 ; pub const INT32_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const INT8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT16_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const INT32_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const UINT8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT16_MAX : :: std :: os :: raw :: c_uint = 65535 ; pub const UINT32_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const INT_LEAST8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT_LEAST16_MIN : :: std :: os :: raw :: c_int = -32768 ; pub const INT_LEAST32_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const INT_LEAST8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT_LEAST16_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const INT_LEAST32_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const UINT_LEAST8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT_LEAST16_MAX : :: std :: os :: raw :: c_uint = 65535 ; pub const UINT_LEAST32_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const INT_FAST8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT_FAST16_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INT_FAST32_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INT_FAST8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT_FAST16_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const INT_FAST32_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINT_FAST8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT_FAST16_MAX : :: std :: os :: raw :: c_int = -1 ; pub const UINT_FAST32_MAX : :: std :: os :: raw :: c_int = -1 ; pub const INTPTR_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INTPTR_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINTPTR_MAX : :: std :: os :: raw :: c_int = -1 ; pub const PTRDIFF_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const PTRDIFF_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const SIG_ATOMIC_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const SIG_ATOMIC_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const SIZE_MAX : :: std :: os :: raw :: c_int = -1 ; pub const WINT_MIN : :: std :: os :: raw :: c_uint = 0 ; pub const WINT_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub type bool_ = :: std :: os :: raw :: c_uchar ; pub type wchar_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : f64 , } # [ test ] fn bindgen_test_layout_max_align_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < max_align_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( max_align_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce2 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce2 ) ) ) ; } pub type int_least8_t = :: std :: os :: raw :: c_schar ; pub type int_least16_t = :: std :: os :: raw :: c_short ; pub type int_least32_t = :: std :: os :: raw :: c_int ; pub type int_least64_t = :: std :: os :: raw :: c_long ; pub type uint_least8_t = :: std :: os :: raw :: c_uchar ; pub type uint_least16_t = :: std :: os :: raw :: c_ushort ; pub type uint_least32_t = :: std :: os :: raw :: c_uint ; pub type uint_least64_t = :: std :: os :: raw :: c_ulong ; pub type int_fast8_t = :: std :: os :: raw :: c_schar ; pub type int_fast16_t = :: std :: os :: raw :: c_long ; pub type int_fast32_t = :: std :: os :: raw :: c_long ; pub type int_fast64_t = :: std :: os :: raw :: c_long ; pub type uint_fast8_t = :: std :: os :: raw :: c_uchar ; pub type uint_fast16_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast32_t = :: std :: os :: raw :: c_ulong ; pub type uint_fast64_t = :: std :: os :: raw :: c_ulong ; pub type intmax_t = :: std :: os :: raw :: c_long ; pub type uintmax_t = :: std :: os :: raw :: c_ulong ; pub const primitiv_Code_PRIMITIV_OK : primitiv_Code = 0 ; pub const primitiv_Code_PRIMITIV_ERROR : primitiv_Code = 1 ; pub const primitiv_Code_PRIMITIV_CANCELLED : primitiv_Code = 2 ; pub const primitiv_Code_PRIMITIV_UNKNOWN : primitiv_Code = 3 ; pub const primitiv_Code_PRIMITIV_INVALID_ARGUMENT : primitiv_Code = 4 ; pub const primitiv_Code_PRIMITIV_DEADLINE_EXCEEDED : primitiv_Code = 5 ; pub const primitiv_Code_PRIMITIV_NOT_FOUND : primitiv_Code = 6 ; pub const primitiv_Code_PRIMITIV_ALREADY_EXISTS : primitiv_Code = 7 ; pub const primitiv_Code_PRIMITIV_PERMISSION_DENIED : primitiv_Code = 8 ; pub const primitiv_Code_PRIMITIV_RESOURCE_EXHAUSTED : primitiv_Code = 9 ; pub const primitiv_Code_PRIMITIV_FAILED_PRECONDITION : primitiv_Code = 10 ; pub const primitiv_Code_PRIMITIV_ABORTED : primitiv_Code = 11 ; pub const primitiv_Code_PRIMITIV_OUT_OF_RANGE : primitiv_Code = 12 ; pub const primitiv_Code_PRIMITIV_UNIMPLEMENTED : primitiv_Code = 13 ; pub const primitiv_Code_PRIMITIV_INTERNAL : primitiv_Code = 14 ; pub const primitiv_Code_PRIMITIV_UNAVAILABLE : primitiv_Code = 15 ; pub const primitiv_Code_PRIMITIV_DATA_LOSS : primitiv_Code = 16 ; pub const primitiv_Code_PRIMITIV_UNAUTHENTICATED : primitiv_Code = 17 ; pub type primitiv_Code = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Status { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Status_new ( ) -> * mut primitiv_Status ; 
} extern "C" {
 pub fn primitiv_Status_delete ( status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Status_set_status ( status : * mut primitiv_Status , code : primitiv_Code , file : * const :: std :: os :: raw :: c_char , line : u32 , message : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn primitiv_Status_get_code ( status : * const primitiv_Status , ) -> primitiv_Code ; 
} extern "C" {
 pub fn primitiv_Status_get_message ( status : * const primitiv_Status , ) -> * const :: std :: os :: raw :: c_char ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Device { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Device_get_default ( ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn safe_primitiv_Device_get_default ( status : * mut primitiv_Status , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn primitiv_Device_set_default ( device : * mut primitiv_Device , ) ; 
} extern "C" {
 pub fn safe_primitiv_Device_set_default ( device : * mut primitiv_Device , status : * mut primitiv_Status , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Shape { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Shape_new ( ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Shape_new ( status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Shape_new_with_dims ( dims : * const u32 , n : usize , batch : u32 , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Shape_new_with_dims ( dims : * const u32 , n : usize , batch : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Shape_delete ( shape : * mut primitiv_Shape , ) ; 
} extern "C" {
 pub fn safe_primitiv_Shape_delete ( shape : * mut primitiv_Shape , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Shape_op_getitem ( shape : * const primitiv_Shape , i : u32 , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Shape_op_getitem ( shape : * const primitiv_Shape , i : u32 , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Shape_dims ( shape : * const primitiv_Shape , ) -> * const u32 ; 
} extern "C" {
 pub fn safe_primitiv_Shape_dims ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> * const u32 ; 
} extern "C" {
 pub fn primitiv_Shape_depth ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Shape_depth ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Shape_batch ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Shape_batch ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Shape_volume ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Shape_volume ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Shape_lower_volume ( shape : * const primitiv_Shape , dim : u32 , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Shape_lower_volume ( shape : * const primitiv_Shape , dim : u32 , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Shape_size ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Shape_size ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Shape_to_string ( shape : * const primitiv_Shape , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn safe_primitiv_Shape_to_string ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn primitiv_Shape_op_eq ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_op_eq ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_op_ne ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_op_ne ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_has_batch ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_has_batch ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_has_compatible_batch ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_has_compatible_batch ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_is_scalar ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_is_scalar ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_is_row_vector ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_is_row_vector ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_is_matrix ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_is_matrix ( shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_has_same_dims ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_has_same_dims ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_has_same_loo_dims ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , dim : u32 , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Shape_has_same_loo_dims ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , dim : u32 , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Shape_resize_dim ( shape : * const primitiv_Shape , dim : u32 , m : u32 , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Shape_resize_dim ( shape : * const primitiv_Shape , dim : u32 , m : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Shape_resize_batch ( shape : * const primitiv_Shape , batch : u32 , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Shape_resize_batch ( shape : * const primitiv_Shape , batch : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Shape_update_dim ( shape : * mut primitiv_Shape , dim : u32 , m : u32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Shape_update_dim ( shape : * mut primitiv_Shape , dim : u32 , m : u32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Shape_update_batch ( shape : * mut primitiv_Shape , batch : u32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Shape_update_batch ( shape : * mut primitiv_Shape , batch : u32 , status : * mut primitiv_Status , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Tensor { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Tensor_new ( ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_new ( status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Tensor_new_from_tensor ( tensor : * mut primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_new_from_tensor ( tensor : * mut primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Tensor_delete ( tensor : * mut primitiv_Tensor , ) ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_delete ( tensor : * mut primitiv_Tensor , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Tensor_valid ( tensor : * const primitiv_Tensor , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_valid ( tensor : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Tensor_shape ( tensor : * const primitiv_Tensor , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_shape ( tensor : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Tensor_device ( tensor : * const primitiv_Tensor , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_device ( tensor : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn primitiv_Tensor_to_float ( tensor : * const primitiv_Tensor , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_to_float ( tensor : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Tensor_to_array ( tensor : * const primitiv_Tensor , array : * mut f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_to_array ( tensor : * const primitiv_Tensor , array : * mut f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Tensor_argmax ( tensor : * const primitiv_Tensor , dim : u32 , ) -> * mut u32 ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_argmax ( tensor : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut u32 ; 
} extern "C" {
 pub fn primitiv_Tensor_argmin ( tensor : * const primitiv_Tensor , dim : u32 , ) -> * mut u32 ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_argmin ( tensor : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut u32 ; 
} extern "C" {
 pub fn primitiv_Tensor_reset ( tensor : * mut primitiv_Tensor , k : f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_reset ( tensor : * mut primitiv_Tensor , k : f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Tensor_reset_by_array ( tensor : * mut primitiv_Tensor , values : * const f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_reset_by_array ( tensor : * mut primitiv_Tensor , values : * const f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Tensor_reshape ( tensor : * const primitiv_Tensor , new_shape : * const primitiv_Shape , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_reshape ( tensor : * const primitiv_Tensor , new_shape : * const primitiv_Shape , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Tensor_flatten ( tensor : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_flatten ( tensor : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Tensor_inplace_multiply_const ( tensor : * mut primitiv_Tensor , k : f32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_inplace_multiply_const ( tensor : * mut primitiv_Tensor , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Tensor_inplace_add ( tensor : * mut primitiv_Tensor , x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_inplace_add ( tensor : * mut primitiv_Tensor , x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Tensor_inplace_subtract ( tensor : * mut primitiv_Tensor , x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Tensor_inplace_subtract ( tensor : * mut primitiv_Tensor , x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Node { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Graph { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Node_new ( ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_Node_new ( status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_Node_new_with_movement ( node : * mut primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_Node_new_with_movement ( node : * mut primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_Node_delete ( node : * mut primitiv_Node , ) ; 
} extern "C" {
 pub fn safe_primitiv_Node_delete ( node : * mut primitiv_Node , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Node_valid ( node : * const primitiv_Node , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Node_valid ( node : * const primitiv_Node , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Node_graph ( node : * const primitiv_Node , ) -> * mut primitiv_Graph ; 
} extern "C" {
 pub fn safe_primitiv_Node_graph ( node : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Graph ; 
} extern "C" {
 pub fn primitiv_Node_operator_id ( node : * const primitiv_Node , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Node_operator_id ( node : * const primitiv_Node , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Node_value_id ( node : * const primitiv_Node , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Node_value_id ( node : * const primitiv_Node , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Node_shape ( node : * const primitiv_Node , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Node_shape ( node : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Node_device ( node : * const primitiv_Node , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn safe_primitiv_Node_device ( node : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn primitiv_Node_to_float ( node : * const primitiv_Node , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Node_to_float ( node : * const primitiv_Node , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Node_to_array ( node : * const primitiv_Node , array : * mut f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Node_to_array ( node : * const primitiv_Node , array : * mut f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Node_argmax ( node : * const primitiv_Node , dim : u32 , ) -> * mut u32 ; 
} extern "C" {
 pub fn safe_primitiv_Node_argmax ( node : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut u32 ; 
} extern "C" {
 pub fn primitiv_Node_argmin ( node : * const primitiv_Node , dim : u32 , ) -> * mut u32 ; 
} extern "C" {
 pub fn safe_primitiv_Node_argmin ( node : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut u32 ; 
} extern "C" {
 pub fn primitiv_Node_backward ( node : * const primitiv_Node , ) ; 
} extern "C" {
 pub fn safe_primitiv_Node_backward ( node : * const primitiv_Node , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Graph_new ( ) -> * mut primitiv_Graph ; 
} extern "C" {
 pub fn safe_primitiv_Graph_new ( status : * mut primitiv_Status , ) -> * mut primitiv_Graph ; 
} extern "C" {
 pub fn primitiv_Graph_delete ( graph : * mut primitiv_Graph , ) ; 
} extern "C" {
 pub fn safe_primitiv_Graph_delete ( graph : * mut primitiv_Graph , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Graph_get_default ( ) -> * mut primitiv_Graph ; 
} extern "C" {
 pub fn safe_primitiv_Graph_get_default ( status : * mut primitiv_Status , ) -> * mut primitiv_Graph ; 
} extern "C" {
 pub fn primitiv_Graph_set_default ( graph : * mut primitiv_Graph , ) ; 
} extern "C" {
 pub fn safe_primitiv_Graph_set_default ( graph : * mut primitiv_Graph , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Graph_clear ( graph : * mut primitiv_Graph , ) ; 
} extern "C" {
 pub fn safe_primitiv_Graph_clear ( graph : * mut primitiv_Graph , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Graph_forward ( graph : * mut primitiv_Graph , node : * const primitiv_Node , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Graph_forward ( graph : * mut primitiv_Graph , node : * const primitiv_Node , status : * mut primitiv_Status , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Graph_backward ( graph : * mut primitiv_Graph , node : * const primitiv_Node , ) ; 
} extern "C" {
 pub fn safe_primitiv_Graph_backward ( graph : * mut primitiv_Graph , node : * const primitiv_Node , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Graph_get_shape ( graph : * const primitiv_Graph , node : * const primitiv_Node , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Graph_get_shape ( graph : * const primitiv_Graph , node : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Graph_get_device ( graph : * const primitiv_Graph , node : * const primitiv_Node , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn safe_primitiv_Graph_get_device ( graph : * const primitiv_Graph , node : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn primitiv_Graph_dump ( graph : * const primitiv_Graph , format : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn safe_primitiv_Graph_dump ( graph : * const primitiv_Graph , format : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn primitiv_Graph_num_operators ( graph : * const primitiv_Graph , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Graph_num_operators ( graph : * const primitiv_Graph , status : * mut primitiv_Status , ) -> u32 ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Initializer { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Constant_new ( k : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn safe_primitiv_Constant_new ( k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn primitiv_Constant_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 pub fn safe_primitiv_Constant_delete ( initializer : * mut primitiv_Initializer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Constant_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , ) ; 
} extern "C" {
 pub fn safe_primitiv_Constant_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Uniform_new ( lower : f32 , upper : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn safe_primitiv_Uniform_new ( lower : f32 , upper : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn primitiv_Uniform_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 pub fn safe_primitiv_Uniform_delete ( initializer : * mut primitiv_Initializer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Uniform_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , ) ; 
} extern "C" {
 pub fn safe_primitiv_Uniform_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Normal_new ( mean : f32 , sd : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn safe_primitiv_Normal_new ( mean : f32 , sd : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn primitiv_Normal_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 pub fn safe_primitiv_Normal_delete ( initializer : * mut primitiv_Initializer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Normal_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , ) ; 
} extern "C" {
 pub fn safe_primitiv_Normal_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Identity_new ( ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn safe_primitiv_Identity_new ( status : * mut primitiv_Status , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn primitiv_Identity_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 pub fn safe_primitiv_Identity_delete ( initializer : * mut primitiv_Initializer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Identity_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , ) ; 
} extern "C" {
 pub fn safe_primitiv_Identity_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_XavierUniform_new ( scale : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn safe_primitiv_XavierUniform_new ( scale : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn primitiv_XavierUniform_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 pub fn safe_primitiv_XavierUniform_delete ( initializer : * mut primitiv_Initializer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_XavierUniform_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , ) ; 
} extern "C" {
 pub fn safe_primitiv_XavierUniform_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_XavierNormal_new ( scale : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn safe_primitiv_XavierNormal_new ( scale : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 pub fn primitiv_XavierNormal_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 pub fn safe_primitiv_XavierNormal_delete ( initializer : * mut primitiv_Initializer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_XavierNormal_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , ) ; 
} extern "C" {
 pub fn safe_primitiv_XavierNormal_apply ( initializer : * const primitiv_Initializer , x : * mut primitiv_Tensor , status : * mut primitiv_Status , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Model { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Naive_new ( ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn safe_primitiv_Naive_new ( status : * mut primitiv_Status , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn primitiv_Naive_new_with_seed ( seed : u32 , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn safe_primitiv_Naive_new_with_seed ( seed : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn primitiv_Naive_delete ( device : * mut primitiv_Device , ) ; 
} extern "C" {
 pub fn safe_primitiv_Naive_delete ( device : * mut primitiv_Device , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Naive_dump_description ( device : * const primitiv_Device , ) ; 
} extern "C" {
 pub fn safe_primitiv_Naive_dump_description ( device : * const primitiv_Device , status : * mut primitiv_Status , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Parameter { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Parameter_new ( ) -> * mut primitiv_Parameter ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_new ( status : * mut primitiv_Status , ) -> * mut primitiv_Parameter ; 
} extern "C" {
 pub fn primitiv_Parameter_new_with_values ( shape : * const primitiv_Shape , value : * const f32 , n : usize , device : * mut primitiv_Device , ) -> * mut primitiv_Parameter ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_new_with_values ( shape : * const primitiv_Shape , value : * const f32 , n : usize , device : * mut primitiv_Device , status : * mut primitiv_Status , ) -> * mut primitiv_Parameter ; 
} extern "C" {
 pub fn primitiv_Parameter_new_with_initializer ( shape : * const primitiv_Shape , initializer : * const primitiv_Initializer , device : * mut primitiv_Device , ) -> * mut primitiv_Parameter ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_new_with_initializer ( shape : * const primitiv_Shape , initializer : * const primitiv_Initializer , device : * mut primitiv_Device , status : * mut primitiv_Status , ) -> * mut primitiv_Parameter ; 
} extern "C" {
 pub fn primitiv_Parameter_delete ( parameter : * mut primitiv_Parameter , ) ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_delete ( parameter : * mut primitiv_Parameter , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Parameter_init_with_values ( parameter : * mut primitiv_Parameter , shape : * const primitiv_Shape , value : * const f32 , n : usize , device : * mut primitiv_Device , ) ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_init_with_values ( parameter : * mut primitiv_Parameter , shape : * const primitiv_Shape , value : * const f32 , n : usize , device : * mut primitiv_Device , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Parameter_init_with_initializer ( parameter : * mut primitiv_Parameter , shape : * const primitiv_Shape , initializer : * const primitiv_Initializer , device : * mut primitiv_Device , ) ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_init_with_initializer ( parameter : * mut primitiv_Parameter , shape : * const primitiv_Shape , initializer : * const primitiv_Initializer , device : * mut primitiv_Device , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Parameter_load ( parameter : * mut primitiv_Parameter , path : * const :: std :: os :: raw :: c_char , with_stats : bool_ , device : * mut primitiv_Device , ) ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_load ( parameter : * mut primitiv_Parameter , path : * const :: std :: os :: raw :: c_char , with_stats : bool_ , device : * mut primitiv_Device , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Parameter_save ( parameter : * const primitiv_Parameter , path : * const :: std :: os :: raw :: c_char , with_stats : bool_ , ) ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_save ( parameter : * const primitiv_Parameter , path : * const :: std :: os :: raw :: c_char , with_stats : bool_ , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Parameter_valid ( parameter : * const primitiv_Parameter , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_valid ( parameter : * const primitiv_Parameter , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Parameter_reset_gradients ( parameter : * mut primitiv_Parameter , ) ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_reset_gradients ( parameter : * mut primitiv_Parameter , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Parameter_add_stats ( parameter : * mut primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , shape : * const primitiv_Shape , ) ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_add_stats ( parameter : * mut primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , shape : * const primitiv_Shape , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Parameter_has_stats ( parameter : * mut primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_has_stats ( parameter : * mut primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_Parameter_shape ( parameter : * const primitiv_Parameter , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_shape ( parameter : * const primitiv_Parameter , status : * mut primitiv_Status , ) -> * mut primitiv_Shape ; 
} extern "C" {
 pub fn primitiv_Parameter_device ( parameter : * const primitiv_Parameter , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_device ( parameter : * const primitiv_Parameter , status : * mut primitiv_Status , ) -> * mut primitiv_Device ; 
} extern "C" {
 pub fn primitiv_Parameter_value ( parameter : * const primitiv_Parameter , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_value ( parameter : * const primitiv_Parameter , status : * mut primitiv_Status , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Parameter_gradient ( parameter : * const primitiv_Parameter , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_gradient ( parameter : * const primitiv_Parameter , status : * mut primitiv_Status , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_Parameter_stats ( parameter : * const primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_Parameter_stats ( parameter : * const primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) -> * const primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_positive ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_positive ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_positive ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_positive ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_negative ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_negative ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_negative ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_negative ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_add_node_const ( x : * const primitiv_Node , k : f32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_add_node_const ( x : * const primitiv_Node , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_add_const_node ( k : f32 , x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_add_const_node ( k : f32 , x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_add_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_add_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_add_tensor_const ( x : * const primitiv_Tensor , k : f32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_add_tensor_const ( x : * const primitiv_Tensor , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_add_const_tensor ( k : f32 , x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_add_const_tensor ( k : f32 , x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_add_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_add_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_subtract_node_const ( x : * const primitiv_Node , k : f32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_subtract_node_const ( x : * const primitiv_Node , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_subtract_const_node ( k : f32 , x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_subtract_const_node ( k : f32 , x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_subtract_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_subtract_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_subtract_tensor_const ( x : * const primitiv_Tensor , k : f32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_subtract_tensor_const ( x : * const primitiv_Tensor , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_subtract_const_tensor ( k : f32 , x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_subtract_const_tensor ( k : f32 , x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_subtract_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_subtract_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_multiply_node_const ( x : * const primitiv_Node , k : f32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_multiply_node_const ( x : * const primitiv_Node , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_multiply_const_node ( k : f32 , x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_multiply_const_node ( k : f32 , x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_multiply_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_multiply_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_multiply_tensor_const ( x : * const primitiv_Tensor , k : f32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_multiply_tensor_const ( x : * const primitiv_Tensor , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_multiply_const_tensor ( k : f32 , x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_multiply_const_tensor ( k : f32 , x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_multiply_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_multiply_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_divide_node_const ( x : * const primitiv_Node , k : f32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_divide_node_const ( x : * const primitiv_Node , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_divide_const_node ( k : f32 , x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_divide_const_node ( k : f32 , x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_node_func_divide_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_divide_node_node ( a : * const primitiv_Node , b : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_divide_tensor_const ( x : * const primitiv_Tensor , k : f32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_divide_tensor_const ( x : * const primitiv_Tensor , k : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_divide_const_tensor ( k : f32 , x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_divide_const_tensor ( k : f32 , x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_tensor_func_divide_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_divide_tensor_tensor ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_input ( shape : * const primitiv_Shape , data : * const f32 , n : usize , dev : * mut primitiv_Device , g : * mut primitiv_Graph , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_input ( shape : * const primitiv_Shape , data : * const f32 , n : usize , dev : * mut primitiv_Device , g : * mut primitiv_Graph , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_input ( shape : * const primitiv_Shape , data : * const f32 , n : usize , dev : * mut primitiv_Device , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_input ( shape : * const primitiv_Shape , data : * const f32 , n : usize , dev : * mut primitiv_Device , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_parameter ( param : * mut primitiv_Parameter , g : * mut primitiv_Graph , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_parameter ( param : * mut primitiv_Parameter , g : * mut primitiv_Graph , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_parameter ( param : * mut primitiv_Parameter , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_parameter ( param : * mut primitiv_Parameter , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_copy ( x : * const primitiv_Node , dev : * mut primitiv_Device , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_copy ( x : * const primitiv_Node , dev : * mut primitiv_Device , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_copy ( x : * const primitiv_Tensor , dev : * mut primitiv_Device , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_copy ( x : * const primitiv_Tensor , dev : * mut primitiv_Device , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_pick ( x : * const primitiv_Node , ids : * const u32 , n : usize , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_pick ( x : * const primitiv_Node , ids : * const u32 , n : usize , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_pick ( x : * const primitiv_Tensor , ids : * const u32 , n : usize , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_pick ( x : * const primitiv_Tensor , ids : * const u32 , n : usize , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_slice ( x : * const primitiv_Node , dim : u32 , lower : u32 , upper : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_slice ( x : * const primitiv_Node , dim : u32 , lower : u32 , upper : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_slice ( x : * const primitiv_Tensor , dim : u32 , lower : u32 , upper : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_slice ( x : * const primitiv_Tensor , dim : u32 , lower : u32 , upper : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_matmul ( a : * const primitiv_Node , b : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_matmul ( a : * const primitiv_Node , b : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_matmul ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_matmul ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_sqrt ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_sqrt ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_sqrt ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_sqrt ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_exp ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_exp ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_exp ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_exp ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_log ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_log ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_log ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_log ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_tanh ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_tanh ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_tanh ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_tanh ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_sigmoid ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_sigmoid ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_sigmoid ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_sigmoid ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_softplus ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_softplus ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_softplus ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_softplus ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_sin ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_sin ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_sin ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_sin ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_cos ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_cos ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_cos ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_cos ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_tan ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_tan ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_tan ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_tan ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_relu ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_relu ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_relu ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_relu ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_lrelu ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_lrelu ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_lrelu ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_lrelu ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_prelu ( x : * const primitiv_Node , a : f32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_prelu ( x : * const primitiv_Node , a : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_prelu ( x : * const primitiv_Tensor , a : f32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_prelu ( x : * const primitiv_Tensor , a : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_elu ( x : * const primitiv_Node , a : f32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_elu ( x : * const primitiv_Node , a : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_elu ( x : * const primitiv_Tensor , a : f32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_elu ( x : * const primitiv_Tensor , a : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_sum ( x : * const primitiv_Node , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_sum ( x : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_sum ( x : * const primitiv_Tensor , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_sum ( x : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_broadcast ( x : * const primitiv_Node , dim : u32 , size : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_broadcast ( x : * const primitiv_Node , dim : u32 , size : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_broadcast ( x : * const primitiv_Tensor , dim : u32 , size : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_broadcast ( x : * const primitiv_Tensor , dim : u32 , size : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_logsumexp ( x : * const primitiv_Node , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_logsumexp ( x : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_logsumexp ( x : * const primitiv_Tensor , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_logsumexp ( x : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_log_softmax ( x : * const primitiv_Node , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_log_softmax ( x : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_log_softmax ( x : * const primitiv_Tensor , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_log_softmax ( x : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_softmax ( x : * const primitiv_Node , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_softmax ( x : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_softmax ( x : * const primitiv_Tensor , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_softmax ( x : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_softmax_cross_entropy ( x : * const primitiv_Node , t : * const primitiv_Node , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_softmax_cross_entropy ( x : * const primitiv_Node , t : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_softmax_cross_entropy ( x : * const primitiv_Tensor , t : * const primitiv_Tensor , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_softmax_cross_entropy ( x : * const primitiv_Tensor , t : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_softmax_cross_entropy_with_array ( x : * const primitiv_Node , ids : * const u32 , n : usize , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_softmax_cross_entropy_with_array ( x : * const primitiv_Node , ids : * const u32 , n : usize , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_softmax_cross_entropy_with_array ( x : * const primitiv_Tensor , ids : * const u32 , n : usize , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_softmax_cross_entropy_with_array ( x : * const primitiv_Tensor , ids : * const u32 , n : usize , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_stop_gradient ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_stop_gradient ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_stop_gradient ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_stop_gradient ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_mean ( x : * const primitiv_Node , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_mean ( x : * const primitiv_Node , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_mean ( x : * const primitiv_Tensor , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_mean ( x : * const primitiv_Tensor , dim : u32 , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_batch_mean ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_batch_mean ( x : * const primitiv_Node , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_batch_mean ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_batch_mean ( x : * const primitiv_Tensor , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn primitiv_node_func_dropout ( x : * const primitiv_Node , rate : f32 , enabled : bool_ , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn safe_primitiv_node_func_dropout ( x : * const primitiv_Node , rate : f32 , enabled : bool_ , status : * mut primitiv_Status , ) -> * mut primitiv_Node ; 
} extern "C" {
 pub fn primitiv_tensor_func_dropout ( x : * const primitiv_Tensor , rate : f32 , enabled : bool_ , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 pub fn safe_primitiv_tensor_func_dropout ( x : * const primitiv_Tensor , rate : f32 , enabled : bool_ , status : * mut primitiv_Status , ) -> * mut primitiv_Tensor ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Optimizer { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_Optimizer_load ( optimizer : * mut primitiv_Optimizer , path : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_load ( optimizer : * mut primitiv_Optimizer , path : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_save ( optimizer : * const primitiv_Optimizer , path : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_save ( optimizer : * const primitiv_Optimizer , path : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_get_epoch ( optimizer : * const primitiv_Optimizer , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_get_epoch ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_Optimizer_set_epoch ( optimizer : * mut primitiv_Optimizer , epoch : u32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_set_epoch ( optimizer : * mut primitiv_Optimizer , epoch : u32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_get_learning_rate_scaling ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_get_learning_rate_scaling ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Optimizer_set_learning_rate_scaling ( optimizer : * mut primitiv_Optimizer , scale : f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_set_learning_rate_scaling ( optimizer : * mut primitiv_Optimizer , scale : f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_get_weight_decay ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_get_weight_decay ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Optimizer_set_weight_decay ( optimizer : * mut primitiv_Optimizer , strength : f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_set_weight_decay ( optimizer : * mut primitiv_Optimizer , strength : f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_get_gradient_clipping ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_get_gradient_clipping ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Optimizer_set_gradient_clipping ( optimizer : * mut primitiv_Optimizer , threshold : f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_set_gradient_clipping ( optimizer : * mut primitiv_Optimizer , threshold : f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_add_parameter ( optimizer : * mut primitiv_Optimizer , param : * mut primitiv_Parameter , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_add_parameter ( optimizer : * mut primitiv_Optimizer , param : * mut primitiv_Parameter , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_add_parameters ( optimizer : * mut primitiv_Optimizer , params : * mut * mut primitiv_Parameter , n : usize , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_add_parameters ( optimizer : * mut primitiv_Optimizer , params : * mut * mut primitiv_Parameter , n : usize , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_add_model ( optimizer : * mut primitiv_Optimizer , model : * mut primitiv_Model , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_add_model ( optimizer : * mut primitiv_Optimizer , model : * mut primitiv_Model , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_add_models ( optimizer : * mut primitiv_Optimizer , models : * mut * mut primitiv_Model , n : usize , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_add_models ( optimizer : * mut primitiv_Optimizer , models : * mut * mut primitiv_Model , n : usize , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_reset_gradients ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_reset_gradients ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Optimizer_update ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_Optimizer_update ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_StrIntMap { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_StrFloatMap { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn primitiv_StrIntMap_new ( ) -> * mut primitiv_StrIntMap ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_new ( status : * mut primitiv_Status , ) -> * mut primitiv_StrIntMap ; 
} extern "C" {
 pub fn primitiv_StrIntMap_delete ( map : * mut primitiv_StrIntMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_delete ( map : * mut primitiv_StrIntMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_StrIntMap_put ( map : * mut primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , value : u32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_put ( map : * mut primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , value : u32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_StrIntMap_get ( map : * const primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , ) -> u32 ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_get ( map : * const primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) -> u32 ; 
} extern "C" {
 pub fn primitiv_StrIntMap_remove ( map : * mut primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_remove ( map : * mut primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_StrIntMap_has ( map : * const primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_has ( map : * const primitiv_StrIntMap , key : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_StrIntMap_keys ( map : * mut primitiv_StrIntMap , ) -> * const * const :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_keys ( map : * mut primitiv_StrIntMap , status : * mut primitiv_Status , ) -> * const * const :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn primitiv_StrIntMap_values ( map : * mut primitiv_StrIntMap , ) -> * const u32 ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_values ( map : * mut primitiv_StrIntMap , status : * mut primitiv_Status , ) -> * const u32 ; 
} extern "C" {
 pub fn primitiv_StrIntMap_clear ( map : * mut primitiv_StrIntMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrIntMap_clear ( map : * mut primitiv_StrIntMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_new ( ) -> * mut primitiv_StrFloatMap ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_new ( status : * mut primitiv_Status , ) -> * mut primitiv_StrFloatMap ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_delete ( map : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_delete ( map : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_put ( map : * mut primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , value : f32 , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_put ( map : * mut primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , value : f32 , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_get ( map : * const primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_get ( map : * const primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_remove ( map : * mut primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_remove ( map : * mut primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_has ( map : * const primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , ) -> bool_ ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_has ( map : * const primitiv_StrFloatMap , key : * const :: std :: os :: raw :: c_char , status : * mut primitiv_Status , ) -> bool_ ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_keys ( map : * mut primitiv_StrFloatMap , ) -> * const * const :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_keys ( map : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) -> * const * const :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_values ( map : * mut primitiv_StrFloatMap , ) -> * const f32 ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_values ( map : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) -> * const f32 ; 
} extern "C" {
 pub fn primitiv_StrFloatMap_clear ( map : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_StrFloatMap_clear ( map : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_SGD_new ( eta : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn safe_primitiv_SGD_new ( eta : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn primitiv_SGD_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_SGD_delete ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_SGD_eta ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_SGD_eta ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_SGD_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_SGD_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_SGD_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_SGD_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_MomentumSGD_new ( eta : f32 , momentum : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn safe_primitiv_MomentumSGD_new ( eta : f32 , momentum : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn primitiv_MomentumSGD_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_MomentumSGD_delete ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_MomentumSGD_eta ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_MomentumSGD_eta ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_MomentumSGD_momentum ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_MomentumSGD_momentum ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_MomentumSGD_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_MomentumSGD_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_MomentumSGD_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_MomentumSGD_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_AdaGrad_new ( eta : f32 , eps : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn safe_primitiv_AdaGrad_new ( eta : f32 , eps : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn primitiv_AdaGrad_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_AdaGrad_delete ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_AdaGrad_eta ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_AdaGrad_eta ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_AdaGrad_eps ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_AdaGrad_eps ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_AdaGrad_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_AdaGrad_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_AdaGrad_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_AdaGrad_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_RMSProp_new ( eta : f32 , alpha : f32 , eps : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn safe_primitiv_RMSProp_new ( eta : f32 , alpha : f32 , eps : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn primitiv_RMSProp_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_RMSProp_delete ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_RMSProp_eta ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_RMSProp_eta ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_RMSProp_alpha ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_RMSProp_alpha ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_RMSProp_eps ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_RMSProp_eps ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_RMSProp_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_RMSProp_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_RMSProp_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_RMSProp_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_AdaDelta_new ( rho : f32 , eps : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn safe_primitiv_AdaDelta_new ( rho : f32 , eps : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn primitiv_AdaDelta_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_AdaDelta_delete ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_AdaDelta_rho ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_AdaDelta_rho ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_AdaDelta_eps ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_AdaDelta_eps ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_AdaDelta_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_AdaDelta_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_AdaDelta_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_AdaDelta_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Adam_new ( alpha : f32 , beta1 : f32 , beta2 : f32 , eps : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn safe_primitiv_Adam_new ( alpha : f32 , beta1 : f32 , beta2 : f32 , eps : f32 , status : * mut primitiv_Status , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 pub fn primitiv_Adam_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 pub fn safe_primitiv_Adam_delete ( optimizer : * mut primitiv_Optimizer , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Adam_alpha ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Adam_alpha ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Adam_beta1 ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Adam_beta1 ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Adam_beta2 ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Adam_beta2 ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Adam_eps ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 pub fn safe_primitiv_Adam_eps ( optimizer : * const primitiv_Optimizer , status : * mut primitiv_Status , ) -> f32 ; 
} extern "C" {
 pub fn primitiv_Adam_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_Adam_get_configs ( optimizer : * const primitiv_Optimizer , uint_configs : * mut primitiv_StrIntMap , float_configs : * mut primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
} extern "C" {
 pub fn primitiv_Adam_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , ) ; 
} extern "C" {
 pub fn safe_primitiv_Adam_set_configs ( optimizer : * mut primitiv_Optimizer , uint_configs : * const primitiv_StrIntMap , float_configs : * const primitiv_StrFloatMap , status : * mut primitiv_Status , ) ; 
}
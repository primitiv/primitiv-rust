/* automatically generated by rust-bindgen */

pub const __bool_true_false_are_defined : :: std :: os :: raw :: c_uint = 1 ; pub const true_ : :: std :: os :: raw :: c_uint = 1 ; pub const false_ : :: std :: os :: raw :: c_uint = 0 ; pub const __WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __DARWIN_ONLY_64_BIT_INO_T : :: std :: os :: raw :: c_uint = 0 ; pub const __DARWIN_ONLY_VERS_1050 : :: std :: os :: raw :: c_uint = 0 ; pub const __DARWIN_ONLY_UNIX_CONFORMANCE : :: std :: os :: raw :: c_uint = 1 ; pub const __DARWIN_UNIX03 : :: std :: os :: raw :: c_uint = 1 ; pub const __DARWIN_64_BIT_INO_T : :: std :: os :: raw :: c_uint = 0 ; pub const __DARWIN_VERS_1050 : :: std :: os :: raw :: c_uint = 0 ; pub const __DARWIN_NON_CANCELABLE : :: std :: os :: raw :: c_uint = 0 ; pub const __DARWIN_SUF_EXTSN : & 'static [ u8 ; 14usize ] = b"$DARWIN_EXTSN\0" ; pub const __DARWIN_C_ANSI : :: std :: os :: raw :: c_uint = 4096 ; pub const __DARWIN_C_FULL : :: std :: os :: raw :: c_uint = 900000 ; pub const __DARWIN_C_LEVEL : :: std :: os :: raw :: c_uint = 900000 ; pub const __STDC_WANT_LIB_EXT1__ : :: std :: os :: raw :: c_uint = 1 ; pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE : :: std :: os :: raw :: c_uint = 1 ; pub const _DARWIN_FEATURE_UNIX_CONFORMANCE : :: std :: os :: raw :: c_uint = 3 ; pub const __PTHREAD_SIZE__ : :: std :: os :: raw :: c_uint = 8176 ; pub const __PTHREAD_ATTR_SIZE__ : :: std :: os :: raw :: c_uint = 56 ; pub const __PTHREAD_MUTEXATTR_SIZE__ : :: std :: os :: raw :: c_uint = 8 ; pub const __PTHREAD_MUTEX_SIZE__ : :: std :: os :: raw :: c_uint = 56 ; pub const __PTHREAD_CONDATTR_SIZE__ : :: std :: os :: raw :: c_uint = 8 ; pub const __PTHREAD_COND_SIZE__ : :: std :: os :: raw :: c_uint = 40 ; pub const __PTHREAD_ONCE_SIZE__ : :: std :: os :: raw :: c_uint = 8 ; pub const __PTHREAD_RWLOCK_SIZE__ : :: std :: os :: raw :: c_uint = 192 ; pub const __PTHREAD_RWLOCKATTR_SIZE__ : :: std :: os :: raw :: c_uint = 16 ; pub const INT8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT16_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const INT32_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const INT64_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const INT8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT16_MIN : :: std :: os :: raw :: c_int = -32768 ; pub const INT32_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const INT64_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const UINT8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT16_MAX : :: std :: os :: raw :: c_uint = 65535 ; pub const UINT32_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const UINT64_MAX : :: std :: os :: raw :: c_int = -1 ; pub const INT_LEAST8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT_LEAST16_MIN : :: std :: os :: raw :: c_int = -32768 ; pub const INT_LEAST32_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const INT_LEAST64_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INT_LEAST8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT_LEAST16_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const INT_LEAST32_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const INT_LEAST64_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINT_LEAST8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT_LEAST16_MAX : :: std :: os :: raw :: c_uint = 65535 ; pub const UINT_LEAST32_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const UINT_LEAST64_MAX : :: std :: os :: raw :: c_int = -1 ; pub const INT_FAST8_MIN : :: std :: os :: raw :: c_int = -128 ; pub const INT_FAST16_MIN : :: std :: os :: raw :: c_int = -32768 ; pub const INT_FAST32_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const INT_FAST64_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INT_FAST8_MAX : :: std :: os :: raw :: c_uint = 127 ; pub const INT_FAST16_MAX : :: std :: os :: raw :: c_uint = 32767 ; pub const INT_FAST32_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const INT_FAST64_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINT_FAST8_MAX : :: std :: os :: raw :: c_uint = 255 ; pub const UINT_FAST16_MAX : :: std :: os :: raw :: c_uint = 65535 ; pub const UINT_FAST32_MAX : :: std :: os :: raw :: c_uint = 4294967295 ; pub const UINT_FAST64_MAX : :: std :: os :: raw :: c_int = -1 ; pub const INTPTR_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INTPTR_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINTPTR_MAX : :: std :: os :: raw :: c_int = -1 ; pub const INTMAX_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const INTMAX_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const UINTMAX_MAX : :: std :: os :: raw :: c_int = -1 ; pub const PTRDIFF_MIN : :: std :: os :: raw :: c_longlong = -9223372036854775808 ; pub const PTRDIFF_MAX : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const SIZE_MAX : :: std :: os :: raw :: c_int = -1 ; pub const RSIZE_MAX : :: std :: os :: raw :: c_int = -1 ; pub const WINT_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const WINT_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub const SIG_ATOMIC_MIN : :: std :: os :: raw :: c_int = -2147483648 ; pub const SIG_ATOMIC_MAX : :: std :: os :: raw :: c_uint = 2147483647 ; pub type bool_ = :: std :: os :: raw :: c_uchar ; pub type wchar_t = :: std :: os :: raw :: c_int ; pub type max_align_t = f64 ; pub type int_least8_t = i8 ; pub type int_least16_t = i16 ; pub type int_least32_t = i32 ; pub type int_least64_t = i64 ; pub type uint_least8_t = u8 ; pub type uint_least16_t = u16 ; pub type uint_least32_t = u32 ; pub type uint_least64_t = u64 ; pub type int_fast8_t = i8 ; pub type int_fast16_t = i16 ; pub type int_fast32_t = i32 ; pub type int_fast64_t = i64 ; pub type uint_fast8_t = u8 ; pub type uint_fast16_t = u16 ; pub type uint_fast32_t = u32 ; pub type uint_fast64_t = u64 ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_longlong ; pub type __uint64_t = :: std :: os :: raw :: c_ulonglong ; pub type __darwin_intptr_t = :: std :: os :: raw :: c_long ; pub type __darwin_natural_t = :: std :: os :: raw :: c_uint ; pub type __darwin_ct_rune_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t { pub __mbstate8 : [ :: std :: os :: raw :: c_char ; 128usize ] , pub _mbstateL : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ; 16usize ] , } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __mbstate8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( _mbstateL ) ) ) ; } pub type __darwin_mbstate_t = __mbstate_t ; pub type __darwin_ptrdiff_t = :: std :: os :: raw :: c_long ; pub type __darwin_size_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_va_list = __builtin_va_list ; pub type __darwin_wchar_t = :: std :: os :: raw :: c_int ; pub type __darwin_rune_t = __darwin_wchar_t ; pub type __darwin_wint_t = :: std :: os :: raw :: c_int ; pub type __darwin_clock_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_socklen_t = __uint32_t ; pub type __darwin_ssize_t = :: std :: os :: raw :: c_long ; pub type __darwin_time_t = :: std :: os :: raw :: c_long ; pub type __darwin_blkcnt_t = __int64_t ; pub type __darwin_blksize_t = __int32_t ; pub type __darwin_dev_t = __int32_t ; pub type __darwin_fsblkcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_fsfilcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_gid_t = __uint32_t ; pub type __darwin_id_t = __uint32_t ; pub type __darwin_ino64_t = __uint64_t ; pub type __darwin_ino_t = __uint32_t ; pub type __darwin_mach_port_name_t = __darwin_natural_t ; pub type __darwin_mach_port_t = __darwin_mach_port_name_t ; pub type __darwin_mode_t = __uint16_t ; pub type __darwin_off_t = __int64_t ; pub type __darwin_pid_t = __int32_t ; pub type __darwin_sigset_t = __uint32_t ; pub type __darwin_suseconds_t = __int32_t ; pub type __darwin_uid_t = __uint32_t ; pub type __darwin_useconds_t = __uint32_t ; pub type __darwin_uuid_t = [ :: std :: os :: raw :: c_uchar ; 16usize ] ; pub type __darwin_uuid_string_t = [ :: std :: os :: raw :: c_char ; 37usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_pthread_handler_rec { pub __routine : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub __arg : * mut :: std :: os :: raw :: c_void , pub __next : * mut __darwin_pthread_handler_rec , } # [ test ] fn bindgen_test_layout___darwin_pthread_handler_rec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_pthread_handler_rec > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_pthread_handler_rec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_pthread_handler_rec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __routine as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __routine ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __arg as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __next as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_attr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 56usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_attr_t > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_cond_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 40usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_condattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_condattr_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_condattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_mutex_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 56usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_mutex_t > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_mutexattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_mutexattr_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_mutexattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_once_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_once_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_once_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_once_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_once_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_once_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_rwlock_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 192usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_rwlock_t > ( ) , 200usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_rwlockattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 16usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_rwlockattr_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_t { pub __sig : :: std :: os :: raw :: c_long , pub __cleanup_stack : * mut __darwin_pthread_handler_rec , pub __opaque : [ :: std :: os :: raw :: c_char ; 8176usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_t > ( ) , 8192usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_t ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_t ) ) . __cleanup_stack as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __cleanup_stack ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _opaque_pthread_t ) ) . __opaque as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __opaque ) ) ) ; } pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t ; pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t ; pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t ; pub type __darwin_pthread_key_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t ; pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t ; pub type __darwin_pthread_once_t = _opaque_pthread_once_t ; pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t ; pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t ; pub type __darwin_pthread_t = * mut _opaque_pthread_t ; pub type intmax_t = :: std :: os :: raw :: c_long ; pub type uintmax_t = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Device { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_primitiv_Device_get_default" ] 
 pub fn primitiv_Device_get_default ( ) -> * mut primitiv_Device ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Device_set_default" ] 
 pub fn primitiv_Device_set_default ( device : * mut primitiv_Device , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Shape { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_new" ] 
 pub fn primitiv_Shape_new ( ) -> * mut primitiv_Shape ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_new_with_dims" ] 
 pub fn primitiv_Shape_new_with_dims ( dims : * const u32 , n : usize , batch : u32 , ) -> * mut primitiv_Shape ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_delete" ] 
 pub fn primitiv_Shape_delete ( shape : * const primitiv_Shape , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_op_getitem" ] 
 pub fn primitiv_Shape_op_getitem ( shape : * const primitiv_Shape , i : u32 , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_dims" ] 
 pub fn primitiv_Shape_dims ( shape : * const primitiv_Shape , ) -> * const u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_depth" ] 
 pub fn primitiv_Shape_depth ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_batch" ] 
 pub fn primitiv_Shape_batch ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_volume" ] 
 pub fn primitiv_Shape_volume ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_lower_volume" ] 
 pub fn primitiv_Shape_lower_volume ( shape : * const primitiv_Shape , dim : u32 , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_size" ] 
 pub fn primitiv_Shape_size ( shape : * const primitiv_Shape , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_to_string" ] 
 pub fn primitiv_Shape_to_string ( shape : * const primitiv_Shape , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_op_eq" ] 
 pub fn primitiv_Shape_op_eq ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_op_ne" ] 
 pub fn primitiv_Shape_op_ne ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_has_batch" ] 
 pub fn primitiv_Shape_has_batch ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_has_compatible_batch" ] 
 pub fn primitiv_Shape_has_compatible_batch ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_is_scalar" ] 
 pub fn primitiv_Shape_is_scalar ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_is_row_vector" ] 
 pub fn primitiv_Shape_is_row_vector ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_is_matrix" ] 
 pub fn primitiv_Shape_is_matrix ( shape : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_has_same_dims" ] 
 pub fn primitiv_Shape_has_same_dims ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_has_same_loo_dims" ] 
 pub fn primitiv_Shape_has_same_loo_dims ( shape : * const primitiv_Shape , rhs : * const primitiv_Shape , dim : u32 , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_resize_dim" ] 
 pub fn primitiv_Shape_resize_dim ( shape : * const primitiv_Shape , dim : u32 , m : u32 , ) -> * mut primitiv_Shape ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_resize_batch" ] 
 pub fn primitiv_Shape_resize_batch ( shape : * const primitiv_Shape , batch : u32 , ) -> * mut primitiv_Shape ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_update_dim" ] 
 pub fn primitiv_Shape_update_dim ( shape : * mut primitiv_Shape , dim : u32 , m : u32 , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Shape_update_batch" ] 
 pub fn primitiv_Shape_update_batch ( shape : * mut primitiv_Shape , batch : u32 , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Tensor { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Node { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Graph { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_new" ] 
 pub fn primitiv_Node_new ( ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_new_with_movement" ] 
 pub fn primitiv_Node_new_with_movement ( node : * mut primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_delete" ] 
 pub fn primitiv_Node_delete ( node : * mut primitiv_Node , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_valid" ] 
 pub fn primitiv_Node_valid ( node : * const primitiv_Node , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_graph" ] 
 pub fn primitiv_Node_graph ( node : * const primitiv_Node , ) -> * mut primitiv_Graph ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_function_id" ] 
 pub fn primitiv_Node_function_id ( node : * const primitiv_Node , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_value_id" ] 
 pub fn primitiv_Node_value_id ( node : * const primitiv_Node , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_shape" ] 
 pub fn primitiv_Node_shape ( node : * const primitiv_Node , ) -> * const primitiv_Shape ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_device" ] 
 pub fn primitiv_Node_device ( node : * const primitiv_Node , ) -> * mut primitiv_Device ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_to_float" ] 
 pub fn primitiv_Node_to_float ( node : * const primitiv_Node , ) -> f32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_to_array" ] 
 pub fn primitiv_Node_to_array ( node : * const primitiv_Node , ) -> * mut f32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_argmax" ] 
 pub fn primitiv_Node_argmax ( node : * const primitiv_Node , dim : u32 , ) -> * mut u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_argmin" ] 
 pub fn primitiv_Node_argmin ( node : * const primitiv_Node , dim : u32 , ) -> * mut u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Node_backward" ] 
 pub fn primitiv_Node_backward ( node : * const primitiv_Node , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_new" ] 
 pub fn primitiv_Graph_new ( ) -> * mut primitiv_Graph ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_delete" ] 
 pub fn primitiv_Graph_delete ( graph : * mut primitiv_Graph , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_get_default" ] 
 pub fn primitiv_Graph_get_default ( ) -> * mut primitiv_Graph ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_set_default" ] 
 pub fn primitiv_Graph_set_default ( graph : * mut primitiv_Graph , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_clear" ] 
 pub fn primitiv_Graph_clear ( graph : * mut primitiv_Graph , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_forward" ] 
 pub fn primitiv_Graph_forward ( graph : * mut primitiv_Graph , node : * const primitiv_Node , ) -> * const primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_backward" ] 
 pub fn primitiv_Graph_backward ( graph : * mut primitiv_Graph , node : * const primitiv_Node , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_get_shape" ] 
 pub fn primitiv_Graph_get_shape ( graph : * const primitiv_Graph , node : * const primitiv_Node , ) -> * const primitiv_Shape ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_get_device" ] 
 pub fn primitiv_Graph_get_device ( graph : * const primitiv_Graph , node : * const primitiv_Node , ) -> * mut primitiv_Device ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_dump" ] 
 pub fn primitiv_Graph_dump ( graph : * const primitiv_Graph , format : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Graph_num_functions" ] 
 pub fn primitiv_Graph_num_functions ( graph : * const primitiv_Graph , ) -> u32 ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Initializer { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_primitiv_Constant_new" ] 
 pub fn primitiv_Constant_new ( k : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Constant_delete" ] 
 pub fn primitiv_Constant_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Uniform_new" ] 
 pub fn primitiv_Uniform_new ( lower : f32 , upper : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Uniform_delete" ] 
 pub fn primitiv_Uniform_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Normal_new" ] 
 pub fn primitiv_Normal_new ( mean : f32 , sd : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Normal_delete" ] 
 pub fn primitiv_Normal_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Identity_new" ] 
 pub fn primitiv_Identity_new ( ) -> * mut primitiv_Initializer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Identity_delete" ] 
 pub fn primitiv_Identity_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_XavierUniform_new" ] 
 pub fn primitiv_XavierUniform_new ( scale : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_XavierUniform_delete" ] 
 pub fn primitiv_XavierUniform_delete ( initializer : * mut primitiv_Initializer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_XavierNormal_new" ] 
 pub fn primitiv_XavierNormal_new ( scale : f32 , ) -> * mut primitiv_Initializer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_XavierNormal_delete" ] 
 pub fn primitiv_XavierNormal_delete ( initializer : * mut primitiv_Initializer , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Model { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_primitiv_Naive_new" ] 
 pub fn primitiv_Naive_new ( ) -> * mut primitiv_Device ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Naive_new_with_seed" ] 
 pub fn primitiv_Naive_new_with_seed ( seed : u32 , ) -> * mut primitiv_Device ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Naive_delete" ] 
 pub fn primitiv_Naive_delete ( device : * mut primitiv_Device , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Parameter { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_new" ] 
 pub fn primitiv_Parameter_new ( ) -> * mut primitiv_Parameter ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_new_with_values" ] 
 pub fn primitiv_Parameter_new_with_values ( shape : * const primitiv_Shape , value : * const f32 , n : usize , device : * mut primitiv_Device , ) -> * mut primitiv_Parameter ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_new_with_initializer" ] 
 pub fn primitiv_Parameter_new_with_initializer ( shape : * const primitiv_Shape , initializer : * const primitiv_Initializer , device : * mut primitiv_Device , ) -> * mut primitiv_Parameter ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_delete" ] 
 pub fn primitiv_Parameter_delete ( parameter : * mut primitiv_Parameter , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_init_with_values" ] 
 pub fn primitiv_Parameter_init_with_values ( parameter : * mut primitiv_Parameter , shape : * const primitiv_Shape , value : * const f32 , n : usize , device : * mut primitiv_Device , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_init_with_initializer" ] 
 pub fn primitiv_Parameter_init_with_initializer ( parameter : * mut primitiv_Parameter , shape : * const primitiv_Shape , initializer : * const primitiv_Initializer , device : * mut primitiv_Device , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_load" ] 
 pub fn primitiv_Parameter_load ( parameter : * mut primitiv_Parameter , path : * const :: std :: os :: raw :: c_char , with_stats : bool_ , device : * mut primitiv_Device , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_save" ] 
 pub fn primitiv_Parameter_save ( parameter : * const primitiv_Parameter , path : * const :: std :: os :: raw :: c_char , with_stats : bool_ , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_valid" ] 
 pub fn primitiv_Parameter_valid ( parameter : * const primitiv_Parameter , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_reset_gradients" ] 
 pub fn primitiv_Parameter_reset_gradients ( parameter : * mut primitiv_Parameter , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_add_stats" ] 
 pub fn primitiv_Parameter_add_stats ( parameter : * mut primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , shape : * const primitiv_Shape , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_has_stats" ] 
 pub fn primitiv_Parameter_has_stats ( parameter : * mut primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , ) -> bool_ ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_shape" ] 
 pub fn primitiv_Parameter_shape ( parameter : * const primitiv_Parameter , ) -> * const primitiv_Shape ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_device" ] 
 pub fn primitiv_Parameter_device ( parameter : * const primitiv_Parameter , ) -> * mut primitiv_Device ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_value" ] 
 pub fn primitiv_Parameter_value ( parameter : * const primitiv_Parameter , ) -> * const primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_gradient" ] 
 pub fn primitiv_Parameter_gradient ( parameter : * const primitiv_Parameter , ) -> * const primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Parameter_stats" ] 
 pub fn primitiv_Parameter_stats ( parameter : * const primitiv_Parameter , name : * const :: std :: os :: raw :: c_char , ) -> * const primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_node_op_mean" ] 
 pub fn primitiv_node_op_mean ( x : * const primitiv_Node , dim : u32 , ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_tensor_op_mean" ] 
 pub fn primitiv_tensor_op_mean ( x : * const primitiv_Tensor , dim : u32 , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_node_op_input" ] 
 pub fn primitiv_node_op_input ( shape : * const primitiv_Shape , data : * const f32 , n : usize , device : * mut primitiv_Device , ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_tensor_op_input" ] 
 pub fn primitiv_tensor_op_input ( shape : * const primitiv_Shape , data : * const f32 , n : usize , device : * mut primitiv_Device , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_node_op_parameter" ] 
 pub fn primitiv_node_op_parameter ( param : * mut primitiv_Parameter , ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_tensor_op_parameter" ] 
 pub fn primitiv_tensor_op_parameter ( param : * mut primitiv_Parameter , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_node_op_tanh" ] 
 pub fn primitiv_node_op_tanh ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_tensor_op_tanh" ] 
 pub fn primitiv_tensor_op_tanh ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_node_op_matmul" ] 
 pub fn primitiv_node_op_matmul ( a : * const primitiv_Node , b : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_tensor_op_matmul" ] 
 pub fn primitiv_tensor_op_matmul ( a : * const primitiv_Tensor , b : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_node_op_batch_mean" ] 
 pub fn primitiv_node_op_batch_mean ( x : * const primitiv_Node , ) -> * mut primitiv_Node ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_tensor_op_batch_mean" ] 
 pub fn primitiv_tensor_op_batch_mean ( x : * const primitiv_Tensor , ) -> * mut primitiv_Tensor ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct primitiv_Optimizer { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_new" ] 
 pub fn primitiv_Optimizer_new ( ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_delete" ] 
 pub fn primitiv_Optimizer_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_load" ] 
 pub fn primitiv_Optimizer_load ( optimizer : * mut primitiv_Optimizer , path : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_save" ] 
 pub fn primitiv_Optimizer_save ( optimizer : * const primitiv_Optimizer , path : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_get_epoch" ] 
 pub fn primitiv_Optimizer_get_epoch ( optimizer : * const primitiv_Optimizer , ) -> u32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_set_epoch" ] 
 pub fn primitiv_Optimizer_set_epoch ( optimizer : * mut primitiv_Optimizer , epoch : u32 , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_get_learning_rate_scaling" ] 
 pub fn primitiv_Optimizer_get_learning_rate_scaling ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_set_learning_rate_scaling" ] 
 pub fn primitiv_Optimizer_set_learning_rate_scaling ( optimizer : * mut primitiv_Optimizer , scale : f32 , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_get_weight_decay" ] 
 pub fn primitiv_Optimizer_get_weight_decay ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_set_weight_decay" ] 
 pub fn primitiv_Optimizer_set_weight_decay ( optimizer : * mut primitiv_Optimizer , strength : f32 , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_get_gradient_clipping" ] 
 pub fn primitiv_Optimizer_get_gradient_clipping ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_set_gradient_clipping" ] 
 pub fn primitiv_Optimizer_set_gradient_clipping ( optimizer : * mut primitiv_Optimizer , threshold : f32 , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_add_parameter" ] 
 pub fn primitiv_Optimizer_add_parameter ( optimizer : * mut primitiv_Optimizer , param : * mut primitiv_Parameter , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_add_model" ] 
 pub fn primitiv_Optimizer_add_model ( optimizer : * mut primitiv_Optimizer , model : * const primitiv_Model , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_reset_gradients" ] 
 pub fn primitiv_Optimizer_reset_gradients ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_Optimizer_update" ] 
 pub fn primitiv_Optimizer_update ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_SGD_new" ] 
 pub fn primitiv_SGD_new ( ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_SGD_new_with_eta" ] 
 pub fn primitiv_SGD_new_with_eta ( eta : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_SGD_delete" ] 
 pub fn primitiv_SGD_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_SGD_eta" ] 
 pub fn primitiv_SGD_eta ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_MomentumSGD_new" ] 
 pub fn primitiv_MomentumSGD_new ( ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_MomentumSGD_new_with_eta" ] 
 pub fn primitiv_MomentumSGD_new_with_eta ( eta : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_MomentumSGD_new_with_eta_and_momentum" ] 
 pub fn primitiv_MomentumSGD_new_with_eta_and_momentum ( eta : f32 , momentum : f32 , ) -> * mut primitiv_Optimizer ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_MomentumSGD_delete" ] 
 pub fn primitiv_MomentumSGD_delete ( optimizer : * mut primitiv_Optimizer , ) ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_MomentumSGD_eta" ] 
 pub fn primitiv_MomentumSGD_eta ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} extern "C" {
 # [ link_name = "\u{1}_primitiv_MomentumSGD_momentum" ] 
 pub fn primitiv_MomentumSGD_momentum ( optimizer : * const primitiv_Optimizer , ) -> f32 ; 
} pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; }